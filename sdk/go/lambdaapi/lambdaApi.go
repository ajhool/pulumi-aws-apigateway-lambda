// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambdaapi

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LambdaApi struct {
	pulumi.ResourceState

	// The bucket resource.
	Bucket s3.BucketOutput `pulumi:"bucket"`
	// The website URL.
	WebsiteUrl pulumi.StringOutput `pulumi:"websiteUrl"`
}

// NewLambdaApi registers a new resource with the given unique name, arguments, and options.
func NewLambdaApi(ctx *pulumi.Context,
	name string, args *LambdaApiArgs, opts ...pulumi.ResourceOption) (*LambdaApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.Distribution == nil {
		return nil, errors.New("invalid value for required argument 'Distribution'")
	}
	var resource LambdaApi
	err := ctx.RegisterRemoteComponentResource("awslambdaapi:index:LambdaApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type lambdaApiArgs struct {
	// The name of the S3 bucket
	BucketName string `pulumi:"bucketName"`
	// Cloudfront args
	Distribution s3.Bucket `pulumi:"distribution"`
}

// The set of arguments for constructing a LambdaApi resource.
type LambdaApiArgs struct {
	// The name of the S3 bucket
	BucketName pulumi.StringInput
	// Cloudfront args
	Distribution s3.BucketInput
}

func (LambdaApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lambdaApiArgs)(nil)).Elem()
}

type LambdaApiInput interface {
	pulumi.Input

	ToLambdaApiOutput() LambdaApiOutput
	ToLambdaApiOutputWithContext(ctx context.Context) LambdaApiOutput
}

func (*LambdaApi) ElementType() reflect.Type {
	return reflect.TypeOf((*LambdaApi)(nil))
}

func (i *LambdaApi) ToLambdaApiOutput() LambdaApiOutput {
	return i.ToLambdaApiOutputWithContext(context.Background())
}

func (i *LambdaApi) ToLambdaApiOutputWithContext(ctx context.Context) LambdaApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaApiOutput)
}

func (i *LambdaApi) ToLambdaApiPtrOutput() LambdaApiPtrOutput {
	return i.ToLambdaApiPtrOutputWithContext(context.Background())
}

func (i *LambdaApi) ToLambdaApiPtrOutputWithContext(ctx context.Context) LambdaApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaApiPtrOutput)
}

type LambdaApiPtrInput interface {
	pulumi.Input

	ToLambdaApiPtrOutput() LambdaApiPtrOutput
	ToLambdaApiPtrOutputWithContext(ctx context.Context) LambdaApiPtrOutput
}

type lambdaApiPtrType LambdaApiArgs

func (*lambdaApiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LambdaApi)(nil))
}

func (i *lambdaApiPtrType) ToLambdaApiPtrOutput() LambdaApiPtrOutput {
	return i.ToLambdaApiPtrOutputWithContext(context.Background())
}

func (i *lambdaApiPtrType) ToLambdaApiPtrOutputWithContext(ctx context.Context) LambdaApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaApiPtrOutput)
}

// LambdaApiArrayInput is an input type that accepts LambdaApiArray and LambdaApiArrayOutput values.
// You can construct a concrete instance of `LambdaApiArrayInput` via:
//
//          LambdaApiArray{ LambdaApiArgs{...} }
type LambdaApiArrayInput interface {
	pulumi.Input

	ToLambdaApiArrayOutput() LambdaApiArrayOutput
	ToLambdaApiArrayOutputWithContext(context.Context) LambdaApiArrayOutput
}

type LambdaApiArray []LambdaApiInput

func (LambdaApiArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LambdaApi)(nil))
}

func (i LambdaApiArray) ToLambdaApiArrayOutput() LambdaApiArrayOutput {
	return i.ToLambdaApiArrayOutputWithContext(context.Background())
}

func (i LambdaApiArray) ToLambdaApiArrayOutputWithContext(ctx context.Context) LambdaApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaApiArrayOutput)
}

// LambdaApiMapInput is an input type that accepts LambdaApiMap and LambdaApiMapOutput values.
// You can construct a concrete instance of `LambdaApiMapInput` via:
//
//          LambdaApiMap{ "key": LambdaApiArgs{...} }
type LambdaApiMapInput interface {
	pulumi.Input

	ToLambdaApiMapOutput() LambdaApiMapOutput
	ToLambdaApiMapOutputWithContext(context.Context) LambdaApiMapOutput
}

type LambdaApiMap map[string]LambdaApiInput

func (LambdaApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LambdaApi)(nil))
}

func (i LambdaApiMap) ToLambdaApiMapOutput() LambdaApiMapOutput {
	return i.ToLambdaApiMapOutputWithContext(context.Background())
}

func (i LambdaApiMap) ToLambdaApiMapOutputWithContext(ctx context.Context) LambdaApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaApiMapOutput)
}

type LambdaApiOutput struct {
	*pulumi.OutputState
}

func (LambdaApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LambdaApi)(nil))
}

func (o LambdaApiOutput) ToLambdaApiOutput() LambdaApiOutput {
	return o
}

func (o LambdaApiOutput) ToLambdaApiOutputWithContext(ctx context.Context) LambdaApiOutput {
	return o
}

func (o LambdaApiOutput) ToLambdaApiPtrOutput() LambdaApiPtrOutput {
	return o.ToLambdaApiPtrOutputWithContext(context.Background())
}

func (o LambdaApiOutput) ToLambdaApiPtrOutputWithContext(ctx context.Context) LambdaApiPtrOutput {
	return o.ApplyT(func(v LambdaApi) *LambdaApi {
		return &v
	}).(LambdaApiPtrOutput)
}

type LambdaApiPtrOutput struct {
	*pulumi.OutputState
}

func (LambdaApiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LambdaApi)(nil))
}

func (o LambdaApiPtrOutput) ToLambdaApiPtrOutput() LambdaApiPtrOutput {
	return o
}

func (o LambdaApiPtrOutput) ToLambdaApiPtrOutputWithContext(ctx context.Context) LambdaApiPtrOutput {
	return o
}

type LambdaApiArrayOutput struct{ *pulumi.OutputState }

func (LambdaApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LambdaApi)(nil))
}

func (o LambdaApiArrayOutput) ToLambdaApiArrayOutput() LambdaApiArrayOutput {
	return o
}

func (o LambdaApiArrayOutput) ToLambdaApiArrayOutputWithContext(ctx context.Context) LambdaApiArrayOutput {
	return o
}

func (o LambdaApiArrayOutput) Index(i pulumi.IntInput) LambdaApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LambdaApi {
		return vs[0].([]LambdaApi)[vs[1].(int)]
	}).(LambdaApiOutput)
}

type LambdaApiMapOutput struct{ *pulumi.OutputState }

func (LambdaApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LambdaApi)(nil))
}

func (o LambdaApiMapOutput) ToLambdaApiMapOutput() LambdaApiMapOutput {
	return o
}

func (o LambdaApiMapOutput) ToLambdaApiMapOutputWithContext(ctx context.Context) LambdaApiMapOutput {
	return o
}

func (o LambdaApiMapOutput) MapIndex(k pulumi.StringInput) LambdaApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LambdaApi {
		return vs[0].(map[string]LambdaApi)[vs[1].(string)]
	}).(LambdaApiOutput)
}

func init() {
	pulumi.RegisterOutputType(LambdaApiOutput{})
	pulumi.RegisterOutputType(LambdaApiPtrOutput{})
	pulumi.RegisterOutputType(LambdaApiArrayOutput{})
	pulumi.RegisterOutputType(LambdaApiMapOutput{})
}
