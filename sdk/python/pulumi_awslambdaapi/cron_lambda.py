# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_aws

__all__ = ['CronLambdaArgs', 'CronLambda']

@pulumi.input_type
class CronLambdaArgs:
    def __init__(__self__, *,
                 handler_arn: pulumi.Input[str],
                 rate_in_minutes: pulumi.Input[float]):
        """
        The set of arguments for constructing a CronLambda resource.
        :param pulumi.Input[str] handler_arn: Lambda function to execute as a cron job
        :param pulumi.Input[float] rate_in_minutes: Rate that the cron lambda will execute.
        """
        pulumi.set(__self__, "handler_arn", handler_arn)
        pulumi.set(__self__, "rate_in_minutes", rate_in_minutes)

    @property
    @pulumi.getter(name="handlerArn")
    def handler_arn(self) -> pulumi.Input[str]:
        """
        Lambda function to execute as a cron job
        """
        return pulumi.get(self, "handler_arn")

    @handler_arn.setter
    def handler_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "handler_arn", value)

    @property
    @pulumi.getter(name="rateInMinutes")
    def rate_in_minutes(self) -> pulumi.Input[float]:
        """
        Rate that the cron lambda will execute.
        """
        return pulumi.get(self, "rate_in_minutes")

    @rate_in_minutes.setter
    def rate_in_minutes(self, value: pulumi.Input[float]):
        pulumi.set(self, "rate_in_minutes", value)


class CronLambda(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 handler_arn: Optional[pulumi.Input[str]] = None,
                 rate_in_minutes: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Create a CronLambda resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] handler_arn: Lambda function to execute as a cron job
        :param pulumi.Input[float] rate_in_minutes: Rate that the cron lambda will execute.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CronLambdaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CronLambda resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CronLambdaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CronLambdaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 handler_arn: Optional[pulumi.Input[str]] = None,
                 rate_in_minutes: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CronLambdaArgs.__new__(CronLambdaArgs)

            if handler_arn is None and not opts.urn:
                raise TypeError("Missing required property 'handler_arn'")
            __props__.__dict__["handler_arn"] = handler_arn
            if rate_in_minutes is None and not opts.urn:
                raise TypeError("Missing required property 'rate_in_minutes'")
            __props__.__dict__["rate_in_minutes"] = rate_in_minutes
            __props__.__dict__["event_rule"] = None
            __props__.__dict__["event_target"] = None
        super(CronLambda, __self__).__init__(
            'awslambdaapi:index:CronLambda',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="eventRule")
    def event_rule(self) -> pulumi.Output['pulumi_aws.cloudwatch.EventRule']:
        """
        Specifies the cron schedule.
        """
        return pulumi.get(self, "event_rule")

    @property
    @pulumi.getter(name="eventTarget")
    def event_target(self) -> pulumi.Output['pulumi_aws.cloudwatch.EventTarget']:
        """
        The website URL.
        """
        return pulumi.get(self, "event_target")

