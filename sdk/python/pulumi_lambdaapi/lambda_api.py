# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_aws

__all__ = ['LambdaApiArgs', 'LambdaApi']

@pulumi.input_type
class LambdaApiArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 distribution: pulumi.Input['pulumi_aws.s3.Bucket']):
        """
        The set of arguments for constructing a LambdaApi resource.
        :param pulumi.Input[str] bucket_name: The name of the S3 bucket
        :param pulumi.Input['pulumi_aws.s3.Bucket'] distribution: Cloudfront args
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "distribution", distribution)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the S3 bucket
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def distribution(self) -> pulumi.Input['pulumi_aws.s3.Bucket']:
        """
        Cloudfront args
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: pulumi.Input['pulumi_aws.s3.Bucket']):
        pulumi.set(self, "distribution", value)


class LambdaApi(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 distribution: Optional[pulumi.Input['pulumi_aws.s3.Bucket']] = None,
                 __props__=None):
        """
        Create a LambdaApi resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the S3 bucket
        :param pulumi.Input['pulumi_aws.s3.Bucket'] distribution: Cloudfront args
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LambdaApiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LambdaApi resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LambdaApiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LambdaApiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 distribution: Optional[pulumi.Input['pulumi_aws.s3.Bucket']] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LambdaApiArgs.__new__(LambdaApiArgs)

            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if distribution is None and not opts.urn:
                raise TypeError("Missing required property 'distribution'")
            __props__.__dict__["distribution"] = distribution
            __props__.__dict__["bucket"] = None
            __props__.__dict__["website_url"] = None
        super(LambdaApi, __self__).__init__(
            'awslambdaapi:index:LambdaApi',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output['pulumi_aws.s3.Bucket']:
        """
        The bucket resource.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="websiteUrl")
    def website_url(self) -> pulumi.Output[str]:
        """
        The website URL.
        """
        return pulumi.get(self, "website_url")

