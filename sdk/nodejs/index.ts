// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cloudfrontS3";
export * from "./cronLambda";
export * from "./lambdaApi";
export * from "./provider";

// Import resources to register:
import { CloudfrontS3 } from "./cloudfrontS3";
import { CronLambda } from "./cronLambda";
import { LambdaApi } from "./lambdaApi";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "awslambdaapi:index:CloudfrontS3":
                return new CloudfrontS3(name, <any>undefined, { urn })
            case "awslambdaapi:index:CronLambda":
                return new CronLambda(name, <any>undefined, { urn })
            case "awslambdaapi:index:LambdaApi":
                return new LambdaApi(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("awslambdaapi", "index", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("awslambdaapi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:awslambdaapi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
